#!/bin/sh
#
# start_udev
#
# script to initialize /dev by using udev.
#
# Copyright (C) 2004 Greg Kroah-Hartman <greg@kroah.com>
#
# Released under the GPL v2 only.
#
# This needs to be run at the earliest possible point in the boot
# process.
#
# Based on the udev init.d script
#
# Thanks go out to the Gentoo developers for proving
# that this is possible to do.
#
# Yes, it's very verbose, feel free to turn off all of the echo calls,
# they were there to make me feel better that everything was working
# properly during development...

# default value, if no config present.
udev_root="/dev"
sysfs_dir="/sys"
udevd_timeout=8

# don't use udev if sysfs is not mounted.
[ -d $sysfs_dir/class ] || exit 1
[ -r /proc/mounts ] || exit 1
[ -f /etc/udev/udev.conf ] && . /etc/udev/udev.conf

. /etc/rc.d/init.d/functions

prog=udev
bin=/sbin/udev
udevd=/lib/udev/udevd
# trim traling slash, code expects it not to be there
udev_root=${udev_root%/}

create_static_nodes() {
	/sbin/kmod static-nodes --format=tmpfiles | \
	while read type file mode uid gid age dev ; do
		case $type in
			d|D)
				mkdir -p --mode=$mode $file
				;;
			*)
				oldIFS=$IFS
				IFS=":"
				set -- $dev
				maj=$1
				min=$2
				IFS=$oldIFS
				mknod --mode=$mode $file $type $maj $min
				;;
		esac
		[ $uid = "-" ] || chown $uid $file
		[ $gid = "-" ] || chgrp $gid $file
	done
}

make_extra_nodes() {
	grep '^[^#]' /etc/udev/links.conf | \
	while read type name arg1; do
		[ "$type" -a "$name" -a ! -e "$udev_root/$name" -a ! -L "/dev/$name" ] ||continue
		case "$type" in
			L) ln -s $arg1 $udev_root/$name ;;
			D) mkdir -p $udev_root/$name ;;
			M) mknod -m 600 /dev/$name $arg1 ;;
			*) echo "links.conf: unparseable line ($type $name $arg1)" ;;
		esac
	done
	[ -d /lib/udev/devices ] && cp -a /lib/udev/devices/* /dev/ >/dev/null 2>&1 || :
	[ -d /lib64/udev/devices ] && cp -a /lib64/udev/devices/* /dev/ >/dev/null 2>&1 || :
}

kill_udevd() {
	if [ -x /sbin/pidof ]; then
		pid=$(/sbin/pidof -x udevd)
		[ -n "$pid" ] && kill $pid
	fi
}

set_hotplug_handler() {
	echo "" > /proc/sys/kernel/hotplug
}

# find subdirs mounted under $udev_root
get_dev_mounts() {
	awk -vudev_root="$udev_root/" '
	BEGIN {
	  len = length(udev_root);
	}

	substr($2, 1, len) == udev_root {
	  print substr($2, len + 1)
	}' /proc/mounts
}

show "Starting udev"; busy

export ACTION=add
prog=udev
ret=0

# mount the devtmpfs on $udev_root, if not already done
awk "\$2 == \"$udev_root\" && \$3 == \"devtmpfs\" { exit 1 }" /proc/mounts && {
	submounts=$(get_dev_mounts)

	if [ "$submounts" ]; then
		# mount to temporary location to be able to move submounts
		# this needs writable TMPDIR:-/tmp, so it won't work in early boot
		# but fix is simple: use initramfs instead of romfs
		devdir=$(mktemp -d ${TMPDIR:-/tmp}/tmpXXXXXX)
	else
		devdir=$udev_root
	fi
	mount -n -o mode=0755 -t devtmpfs devtmpfs "$devdir"
	ret=$(( $ret + $? ))

	# relocate submounts
	for dir in $submounts; do
		mount -n --move $udev_root/$dir $devdir/$dir
		ret=$(( $ret + $? ))
	done

	if [ "$submounts" ]; then
		mount -n --move $devdir $udev_root
		rmdir $devdir
	fi
}

kill_udevd > "$udev_root/null" 2>&1

# Create required static device nodes for the current kernel
create_static_nodes

# Start udevd daemon
$udevd --daemon; rc=$?
test $rc -eq 0 && ok || fail
ret=$(( $ret + $rc ))

# Making extra nodes
show "Setup extra nodes"; busy
make_extra_nodes; rc=$?
test $rc -eq 0 && ok || fail
ret=$(( $ret + $rc ))

if [ -f "/sys/class/tty/console/uevent" ]; then
	# Setting default hotplug handler
	set_hotplug_handler
	ret=$(( $ret + $? ))

	# retrigger all events
	show "Retrigger subsystem events"; busy
	/sbin/udevadm trigger --type=subsystems --action=add; rc=$?
	test $rc -eq 0 && ok || fail
	ret=$(( $ret + $rc ))

	show "Retrigger subsystem events"; busy
	/sbin/udevadm trigger --type=devices --action=add; rc=$?
	test $rc -eq 0 && ok || fail
	ret=$(( $ret + $rc ))

	# wait for the events to finish
	show "udevadm settle"; busy
	/sbin/udevadm settle; rc=$?
	test $rc -eq 0 && ok || fail
	ret=$(( $ret + $rc ))
else
	echo "Kernel too old for this udev version"
fi

exit $ret
